// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import chain "github.com/kyokan/plasma/chain"

import mock "github.com/stretchr/testify/mock"

// BlockDao is an autogenerated mock type for the BlockDao type
type BlockDao struct {
	mock.Mock
}

// BlockAtHeight provides a mock function with given fields: num
func (_m *BlockDao) BlockAtHeight(num uint64) (*chain.Block, error) {
	ret := _m.Called(num)

	var r0 *chain.Block
	if rf, ok := ret.Get(0).(func(uint64) *chain.Block); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Latest provides a mock function with given fields:
func (_m *BlockDao) Latest() (*chain.Block, error) {
	ret := _m.Called()

	var r0 *chain.Block
	if rf, ok := ret.Get(0).(func() *chain.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: blk
func (_m *BlockDao) Save(blk *chain.Block) error {
	ret := _m.Called(blk)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chain.Block) error); ok {
		r0 = rf(blk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
