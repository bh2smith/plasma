// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import big "math/big"
import chain "github.com/kyokan/plasma/chain"
import common "github.com/ethereum/go-ethereum/common"

import mock "github.com/stretchr/testify/mock"

// AddressDao is an autogenerated mock type for the AddressDao type
type AddressDao struct {
	mock.Mock
}

// Balance provides a mock function with given fields: addr
func (_m *AddressDao) Balance(addr *common.Address) (*big.Int, error) {
	ret := _m.Called(addr)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(*common.Address) *big.Int); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.Address) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpendableTxs provides a mock function with given fields: addr
func (_m *AddressDao) SpendableTxs(addr *common.Address) ([]chain.Transaction, error) {
	ret := _m.Called(addr)

	var r0 []chain.Transaction
	if rf, ok := ret.Get(0).(func(*common.Address) []chain.Transaction); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.Address) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UTXOs provides a mock function with given fields: addr
func (_m *AddressDao) UTXOs(addr *common.Address) ([]chain.Transaction, error) {
	ret := _m.Called(addr)

	var r0 []chain.Transaction
	if rf, ok := ret.Get(0).(func(*common.Address) []chain.Transaction); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.Address) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
