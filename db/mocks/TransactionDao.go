// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import chain "github.com/kyokan/plasma/chain"

import mock "github.com/stretchr/testify/mock"

// TransactionDao is an autogenerated mock type for the TransactionDao type
type TransactionDao struct {
	mock.Mock
}

// FindByBlockNum provides a mock function with given fields: blkNum
func (_m *TransactionDao) FindByBlockNum(blkNum uint64) ([]chain.Transaction, error) {
	ret := _m.Called(blkNum)

	var r0 []chain.Transaction
	if rf, ok := ret.Get(0).(func(uint64) []chain.Transaction); ok {
		r0 = rf(blkNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(blkNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByBlockNumTxIdx provides a mock function with given fields: blkNum, txIdx
func (_m *TransactionDao) FindByBlockNumTxIdx(blkNum uint64, txIdx uint32) (*chain.Transaction, error) {
	ret := _m.Called(blkNum, txIdx)

	var r0 *chain.Transaction
	if rf, ok := ret.Get(0).(func(uint64, uint32) *chain.Transaction); ok {
		r0 = rf(blkNum, txIdx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint32) error); ok {
		r1 = rf(blkNum, txIdx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx
func (_m *TransactionDao) Save(tx *chain.Transaction) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chain.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMany provides a mock function with given fields: txs
func (_m *TransactionDao) SaveMany(txs []chain.Transaction) error {
	ret := _m.Called(txs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]chain.Transaction) error); ok {
		r0 = rf(txs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
